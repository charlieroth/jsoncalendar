<!doctype html>
<html>
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{{ title }}</title>
    <link rel="stylesheet" href="/styles.css" />
  </head>
  <body class="min-h-screen bg-background">
    <div class="mx-auto max-w-3xl px-8 py-12">
      <header class="flex items-center justify-between mb-12">
        <a href="/" class="text-xl font-medium text-foreground hover:text-muted-foreground">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-calendar-fold"><path d="M8 2v4"/>
            <path d="M16 2v4"/>
            <path d="M21 17V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h11Z"/>
            <path d="M3 10h18"/>
            <path d="M15 22v-4a2 2 0 0 1 2-2h4"/>
          </svg>
        </a>
        <nav class="flex items-center gap-6 text-sm">
          <a href="/spec/1.0" class="text-xl text-foreground hover:text-muted-foreground">Spec</a>
          <a target="_blank" href="https://github.com/charlieroth/jsoncalendar" class="text-xl font-medium text-foreground hover:text-muted-foreground">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-github">
              <path d="M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4"/>
              <path d="M9 18c-4.51 2-5-2-7-2"/>
            </svg>
          </a>
          <button id="theme-toggle" class="text-xl text-foreground hover:text-muted-foreground">
            <svg id="theme-toggle-icon-moon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z"/>
            </svg>
            <svg id="theme-toggle-icon-sun" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="12" cy="12" r="4"/>
              <path d="M12 2v2"/>
              <path d="M12 20v2"/>
              <path d="m4.93 4.93 1.41 1.41"/>
              <path d="m17.66 17.66 1.41 1.41"/>
              <path d="M2 12h2"/>
              <path d="M20 12h2"/>
              <path d="m6.34 17.66-1.41 1.41"/>
              <path d="m19.07 4.93-1.41 1.41"/>
            </svg>
          </button>
        </nav>
      </header>
      {{ content }}
    </div>
    <script>
      // Constants
      const THEME = {
        DARK: "dark",
        LIGHT: "light",
        STORAGE_KEY: "theme",
      };

      // DOM Elements
      const colorThemes = document.querySelectorAll("[data-color-mode]");
      const darkModeToggleButton = document.getElementById("theme-toggle");
      const themeToggleIconMoon = document.getElementById("theme-toggle-icon-moon");
      const themeToggleIconSun = document.getElementById("theme-toggle-icon-sun");

      // Get user's preferred theme
      const getUserPreference = () => {
        const storedTheme = localStorage.getItem(THEME.STORAGE_KEY);
        if (storedTheme) return storedTheme;

        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? THEME.DARK
          : THEME.LIGHT;
      };

      // Update theme in DOM and localStorage
      const setTheme = (theme) => {
        document.documentElement.classList.remove(THEME.DARK, THEME.LIGHT);
        document.documentElement.classList.add(theme);
        themeToggleIconMoon.classList.toggle("hidden", theme === THEME.LIGHT);
        themeToggleIconSun.classList.toggle("hidden", theme === THEME.DARK);

        colorThemes.forEach((el) => {
          el.setAttribute("data-color-mode", theme);
        });

        localStorage.setItem(THEME.STORAGE_KEY, theme);
      };

      // Toggle between light and dark themes
      const toggleDarkMode = () => {
        const currentTheme = getUserPreference();
        const newTheme = currentTheme === THEME.LIGHT ? THEME.DARK : THEME.LIGHT;
        setTheme(newTheme);
      };

      // Initialize
      const init = () => {
        if (!darkModeToggleButton) {
          console.warn("Theme toggle button not found");
          return;
        }

        // Set initial theme
        setTheme(getUserPreference());

        // Add click listener
        darkModeToggleButton.addEventListener("click", toggleDarkMode);

        // Listen for system theme changes
        window.matchMedia("(prefers-color-scheme: dark)")
          .addEventListener("change", (e) => {
            if (!localStorage.getItem(THEME.STORAGE_KEY)) {
              setTheme(e.matches ? THEME.DARK : THEME.LIGHT);
            }
          });
      };
      init();
    </script>
  </body>
</html>
