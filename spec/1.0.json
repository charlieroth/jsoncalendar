{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "JSON Calendar File Format Schema",
  "description": "A JSON Schema for the modern .jsoncalendar file format proposal, focusing on events and core calendaring features.",
  "$defs": {
    "DateTime": {
      "type": "string",
      "format": "date-time",
      "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$",
      "description": "UTC date-time in ISO 8601 format",
      "examples": ["2024-12-25T15:00:00Z", "2024-01-01T00:00:00Z"]
    },
    "Date": {
      "type": "string",
      "format": "date",
      "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
      "description": "Date in ISO 8601 format",
      "examples": ["2024-12-25", "2024-01-01"]
    },
    "Email": {
      "type": "string",
      "format": "email",
      "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
      "examples": ["user@example.com", "john.doe@company.org"]
    },
    "Duration": {
      "title": "Duration",
      "description": "A structured representation of an ISO 8601 duration. At least one property is required.",
      "type": "object",
      "minProperties": 1,
      "properties": {
        "years": {
          "type": "number",
          "minimum": 0,
          "default": 0
        },
        "months": {
          "type": "number",
          "minimum": 0,
          "default": 0
        },
        "days": {
          "type": "number",
          "minimum": 0,
          "default": 0
        },
        "hours": {
          "type": "number",
          "minimum": 0,
          "default": 0
        },
        "minutes": {
          "type": "number",
          "minimum": 0,
          "default": 0
        },
        "seconds": {
          "type": "number",
          "minimum": 0,
          "default": 0
        }
      },
      "additionalProperties": false,
      "examples": [
        { "minutes": 15 },
        { "hours": 1, "minutes": 30 },
        { "days": 1 }
      ]
    },
    "Location": {
      "type": "object",
      "description": "A structured representation of the event location.",
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name or title of the location.",
          "examples": ["Conference Room A", "Central Park", "Virtual Meeting"]
        },
        "address": {
          "type": "string",
          "description": "The physical address of the location.",
          "examples": [
            "123 Main St, New York, NY 10001",
            "1 Infinite Loop, Cupertino, CA"
          ]
        },
        "latitude": {
          "type": "number",
          "minimum": -90,
          "maximum": 90,
          "description": "The latitude coordinate of the location."
        },
        "longitude": {
          "type": "number",
          "minimum": -180,
          "maximum": 180,
          "description": "The longitude coordinate of the location."
        },
        "mapURL": {
          "type": "string",
          "format": "uri",
          "pattern": "^https?://",
          "description": "An optional URL for a map service (e.g., Google Maps, Apple Maps) to view the location.",
          "examples": ["https://maps.google.com/?q=40.7128,-74.0060"]
        }
      },
      "dependencies": {
        "latitude": ["longitude"],
        "longitude": ["latitude"]
      },
      "additionalProperties": false
    },
    "Recurrence": {
      "type": "object",
      "description": "Details for recurring events.",
      "required": ["frequency"],
      "properties": {
        "frequency": {
          "type": "string",
          "enum": ["second", "minute", "hour", "day", "week", "month", "year"],
          "description": "The frequency of recurrence."
        },
        "interval": {
          "type": "integer",
          "minimum": 1,
          "default": 1,
          "description": "The interval between recurrences."
        },
        "until": {
          "oneOf": [{ "$ref": "#/$defs/DateTime" }, { "$ref": "#/$defs/Date" }],
          "description": "When the recurrence ends (date-time for timed events, date for all-day events)."
        },
        "count": {
          "type": "integer",
          "minimum": 1,
          "description": "The number of occurrences that pass all by* rule filters, not the number of frequency intervals."
        },
        "bySecond": {
          "type": "array",
          "description": "Optional array specifying the seconds for recurrence (0-59).",
          "items": {
            "type": "integer",
            "minimum": 0,
            "maximum": 59
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "byMinute": {
          "type": "array",
          "description": "Optional array specifying the minutes for recurrence (0-59).",
          "items": {
            "type": "integer",
            "minimum": 0,
            "maximum": 59
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "byHour": {
          "type": "array",
          "description": "Optional array specifying the hours for recurrence (0-23).",
          "items": {
            "type": "integer",
            "minimum": 0,
            "maximum": 23
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "byDay": {
          "type": "array",
          "description": "Optional array specifying the days of the week for recurrence. Items can be simple weekday abbreviations (MO, TU, etc.) or ordinal day strings like '1MO' or '-1SU'.",
          "items": {
            "type": "string",
            "pattern": "^-?[1-5]?(MO|TU|WE|TH|FR|SA|SU)$"
          },
          "uniqueItems": true,
          "minItems": 1,
          "examples": [["MO", "WE", "FR"], ["1MO"], ["-1FR"]]
        },
        "byMonthDay": {
          "type": "array",
          "description": "Optional array specifying the days of the month for recurrence (1-31 or -31 to -1, zero is not allowed). Invalid dates (e.g., Feb 31) are skipped entirely.",
          "items": {
            "type": "integer",
            "minimum": -31,
            "maximum": 31,
            "not": { "const": 0 }
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "byYearDay": {
          "type": "array",
          "description": "Optional array specifying the days of the year for recurrence (-366 to -1 or 1 to 366, zero is not allowed).",
          "items": {
            "type": "integer",
            "minimum": -366,
            "maximum": 366,
            "not": { "const": 0 }
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "byWeekNumber": {
          "type": "array",
          "description": "Optional array specifying the week numbers for recurrence (-53 to -1 or 1 to 53, zero is not allowed).",
          "items": {
            "type": "integer",
            "minimum": -53,
            "maximum": 53,
            "not": { "const": 0 }
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "byMonth": {
          "type": "array",
          "description": "Optional array specifying the months for recurrence (1-12).",
          "items": {
            "type": "integer",
            "minimum": 1,
            "maximum": 12
          },
          "uniqueItems": true,
          "minItems": 1
        },
        "bySetPosition": {
          "type": "array",
          "description": "Optional array specifying the nth occurrence within the set of recurrence instances. Applied LAST after all other by* rules have filtered the occurrences.",
          "items": {
            "type": "integer",
            "minimum": -366,
            "maximum": 366,
            "not": { "const": 0 }
          },
          "uniqueItems": true,
          "minItems": 1,
          "examples": [[1], [-1], [1, -1]]
        },
        "weekStart": {
          "type": "string",
          "description": "Optional week start day for the recurrence (defaults to MO if not provided).",
          "enum": ["MO", "TU", "WE", "TH", "FR", "SA", "SU"],
          "default": "MO"
        }
      },
      "oneOf": [
        { "required": ["until"] },
        { "required": ["count"] },
        {
          "not": {
            "anyOf": [{ "required": ["until"] }, { "required": ["count"] }]
          }
        }
      ],
      "additionalProperties": false,
      "$comment": "Semantic validation requirements for implementations: (1) if byMonthDay contains values > 29, implementations should handle non-existent dates gracefully (e.g., Feb 30), (2) bySetPosition is applied AFTER all other by* rules to select specific instances, (3) multiple by* rules create an intersection (AND) not union (OR) of occurrences, (4) when calculating recurring events with an originalTimezone, expand occurrences in that timezone to preserve local time semantics across DST transitions",
      "x-recurrence-edge-cases": {
        "invalidDates": {
          "description": "When a recurrence rule generates an invalid date (e.g., Feb 30, April 31), the occurrence MUST be skipped entirely. Do not shift to a valid date.",
          "example": "Monthly on the 31st: Jan 31, Feb (skip), Mar 31, Apr (skip), May 31..."
        },
        "byRuleEvaluation": {
          "description": "Multiple by* rules are evaluated as a logical AND. An occurrence is only included if it matches ALL specified by* rules.",
          "order": [
            "1. Start with frequency/interval base set",
            "2. Apply byMonth filter",
            "3. Apply byWeekNumber filter",
            "4. Apply byYearDay filter",
            "5. Apply byMonthDay filter",
            "6. Apply byDay filter",
            "7. Apply byHour filter",
            "8. Apply byMinute filter",
            "9. Apply bySecond filter",
            "10. Finally, apply bySetPosition to the filtered set"
          ]
        },
        "dstTransitions": {
          "spring": {
            "description": "When clocks spring forward, times in the skipped hour do not exist. Skip the occurrence entirely.",
            "example": "Daily at 2:30am during spring DST: Mar 11 (skip), Mar 12 at 2:30am..."
          },
          "fall": {
            "description": "When clocks fall back, times in the repeated hour occur twice. Generate only ONE occurrence using the FIRST instance (before the transition).",
            "example": "Daily at 1:30am during fall DST: Nov 4 at 1:30am EDT (not 1:30am EST), Nov 5 at 1:30am EST..."
          },
          "principle": "Preserve wall clock time where possible. When impossible (spring forward), skip the occurrence."
        },
        "conflictResolution": {
          "description": "There are no 'conflicts' between by* rules - they form a logical AND. If no dates match all rules, the recurrence has no occurrences.",
          "example": "FREQ=MONTHLY;BYMONTHDAY=31;BYMONTH=2 produces no occurrences (February never has 31 days)"
        },
        "countCalculation": {
          "description": "The COUNT parameter counts occurrences that pass ALL filters, not potential occurrences.",
          "example": "FREQ=MONTHLY;BYMONTHDAY=31;COUNT=3 might span 5 months: Jan 31, Mar 31, May 31"
        }
      }
    },
    "Notification": {
      "type": "object",
      "required": ["action", "trigger"],
      "properties": {
        "action": {
          "type": "string",
          "enum": ["display", "email"],
          "description": "The type of notification."
        },
        "trigger": {
          "oneOf": [
            {
              "allOf": [
                { "$ref": "#/$defs/Duration" },
                {
                  "$comment": "Duration triggers are relative to event start. Negative values indicate 'before', positive values indicate 'after'",
                  "description": "For notifications before the event, all non-zero duration components should result in a time before the event start"
                }
              ]
            },
            { "$ref": "#/$defs/DateTime" }
          ],
          "description": "Either a structured duration object representing a relative trigger or an absolute UTC date-time string."
        },
        "message": {
          "type": "string",
          "description": "The message to be displayed or sent with the notification.",
          "maxLength": 1000
        }
      },
      "additionalProperties": false
    },
    "Attendee": {
      "type": "object",
      "required": ["name", "email"],
      "properties": {
        "name": {
          "type": "string",
          "description": "The attendee's name.",
          "minLength": 1,
          "examples": ["John Doe", "Jane Smith"]
        },
        "email": {
          "$ref": "#/$defs/Email",
          "description": "The attendee's email address."
        },
        "responseStatus": {
          "type": "string",
          "enum": ["accepted", "declined", "tentative", "needs-action"],
          "default": "needs-action",
          "description": "The attendee's response status."
        }
      },
      "additionalProperties": false
    },
    "Event": {
      "type": "object",
      "required": ["uid", "summary", "start", "end"],
      "properties": {
        "uid": {
          "type": "string",
          "description": "A globally unique identifier for the event.",
          "minLength": 1,
          "examples": [
            "550e8400-e29b-41d4-a716-446655440000",
            "event-12345@example.com"
          ]
        },
        "summary": {
          "type": "string",
          "description": "A short title or summary for the event.",
          "minLength": 1,
          "maxLength": 255
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the event. (UTF-8 encoded; no legacy escaping or folding needed.)",
          "contentMediaType": "text/plain"
        },
        "allDay": {
          "type": "boolean",
          "description": "Indicates whether this is an all-day event. When true, start and end should use date format (YYYY-MM-DD) instead of date-time format.",
          "default": false
        },
        "location": {
          "$ref": "#/$defs/Location"
        },
        "start": {
          "description": "The event start date/time."
        },
        "end": {
          "description": "The event end date/time."
        },
        "originalTimezone": {
          "type": "string",
          "pattern": "^[A-Za-z]+(/[A-Za-z_]+)*$",
          "description": "The original timezone where the event was created. Critical for recurring events to handle DST transitions correctly. While event times are stored in UTC, this preserves the intended local time behavior.",
          "examples": ["America/New_York", "Europe/London", "Asia/Tokyo"],
          "$comment": "For recurring events, this timezone should be used to calculate occurrences, then convert to UTC for storage. This ensures 'every Monday at 9am' remains at 9am local time across DST transitions."
        },
        "recurrence": {
          "$ref": "#/$defs/Recurrence"
        },
        "notifications": {
          "type": "array",
          "description": "Optional notifications or reminders for the event.",
          "items": {
            "$ref": "#/$defs/Notification"
          },
          "maxItems": 10
        },
        "attendees": {
          "type": "array",
          "description": "Optional list of event attendees.",
          "items": {
            "$ref": "#/$defs/Attendee"
          }
        }
      },
      "allOf": [
        {
          "$comment": "Enforce that all-day events use date format and timed events use date-time format",
          "if": {
            "properties": { "allDay": { "const": true } }
          },
          "then": {
            "properties": {
              "start": { "$ref": "#/$defs/Date" },
              "end": { "$ref": "#/$defs/Date" }
            }
          },
          "else": {
            "properties": {
              "start": { "$ref": "#/$defs/DateTime" },
              "end": { "$ref": "#/$defs/DateTime" }
            }
          }
        },
        {
          "$comment": "Semantic validation: end time must not be before start time",
          "if": {
            "properties": {
              "allDay": { "const": false }
            }
          },
          "then": {
            "$comment": "For date-time events, we cannot directly compare in JSON Schema, but implementations should validate this",
            "description": "Implementation requirement: end datetime must be greater than or equal to start datetime"
          }
        },
        {
          "$comment": "For recurring events with an 'until' date, the 'until' must be after the 'start'",
          "if": {
            "properties": {
              "recurrence": {
                "type": "object",
                "required": ["until"]
              }
            }
          },
          "then": {
            "description": "Implementation requirement: recurrence.until must be greater than or equal to event start"
          }
        },
        {
          "$comment": "Notification triggers in the past (relative to event start) must use negative durations",
          "if": {
            "properties": {
              "notifications": {
                "type": "array",
                "minItems": 1
              }
            }
          },
          "then": {
            "description": "Implementation requirement: relative notification triggers before the event must use negative duration values"
          }
        }
      ],
      "additionalProperties": false,
      "$comment": "Additional semantic validations that implementations MUST enforce: (1) end >= start for both date and datetime events, (2) recurrence.until >= start if present, (3) recurrence.count must be >= 1 if present, (4) relative notification triggers must be negative for 'before event' reminders. For timezone handling: When originalTimezone is provided, recurring events should be calculated in that timezone, then converted to UTC. This ensures consistent local times across DST boundaries."
    }
  },
  "$comment": "JSON Calendar Format - Implementations MUST enforce semantic validations beyond structural validation. See individual $comment fields for specific requirements. Timezone Handling: All times are stored in UTC, but originalTimezone preserves the creator's intent for recurring events. When processing recurring events with an originalTimezone, calculate occurrences in that timezone, then convert to UTC. This ensures events like 'every Monday at 9am' remain at 9am local time regardless of DST changes. Recurrence Rules: See x-recurrence-edge-cases in the Recurrence definition for detailed handling of edge cases including invalid dates, DST transitions, and by* rule evaluation order.",
  "type": "object",
  "required": ["version", "productIdentifier", "calendar"],
  "properties": {
    "version": {
      "const": "1.0",
      "description": "The version of the JSON Calendar format."
    },
    "productIdentifier": {
      "type": "string",
      "pattern": "^[A-Za-z0-9.-]+/[A-Za-z0-9.-]+$",
      "description": "A product identifier for the application or system generating the file (e.g., 'CompanyName/ProductName').",
      "examples": ["Anthropic/Claude", "Microsoft/Outlook", "Google/Calendar"]
    },
    "timezoneDatabase": {
      "type": "string",
      "pattern": "^\\d{4}[a-z]$",
      "description": "The IANA Time Zone Database version used when creating this file (e.g., '2024a'). This ensures timezone calculations can be reproduced accurately.",
      "examples": ["2024a", "2023c", "2025b"]
    },
    "calendar": {
      "type": "object",
      "required": ["timezone", "events"],
      "properties": {
        "timezone": {
          "type": "string",
          "pattern": "^[A-Za-z]+(/[A-Za-z_]+)*$",
          "description": "An IANA time zone identifier (e.g., 'America/New_York'). This is the default display timezone for the calendar. All event times are stored in UTC.",
          "examples": [
            "America/New_York",
            "Europe/London",
            "Asia/Tokyo",
            "UTC"
          ],
          "$comment": "This is the calendar's display timezone. Individual events may have been created in different timezones (see event.originalTimezone). For timezone changes or discontinuities, implementations should use the timezoneDatabase version specified at the root level."
        },
        "name": {
          "type": "string",
          "description": "An optional human-readable name for the calendar.",
          "maxLength": 255
        },
        "description": {
          "type": "string",
          "description": "An optional description for the calendar.",
          "contentMediaType": "text/plain"
        },
        "events": {
          "type": "array",
          "description": "A list of calendar events.",
          "items": {
            "$ref": "#/$defs/Event"
          }
        }
      },
      "patternProperties": {
        "^x-": {
          "description": "Extension properties must start with 'x-'"
        }
      },
      "additionalProperties": false
    }
  },
  "patternProperties": {
    "^x-": {
      "description": "Extension properties must start with 'x-'"
    }
  },
  "additionalProperties": false
}
